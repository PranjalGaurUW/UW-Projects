-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE TABLE IF NOT EXISTS public.transactions
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    hash character varying NOT NULL,
    "timestamp" integer NOT NULL,
    description character varying,
    value_in_usd numeric,
    fee numeric,
    comments character varying,
    gas_used numeric,
    gas_price numeric,
    block_number integer,
    token integer,
    operation integer,
    blockchain integer,
    platform integer,
    from_account_id integer,
    to_account_id integer,
    quantity numeric,
    unidentified_from_account character varying,
    unidentified_to_account character varying,
    trade_id character varying,
    gas_price_in_usd numeric,
    protocol integer,
    error boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.wallets
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    wallet_name character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.accounts
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    account_hash character varying NOT NULL,
    blockchain integer NOT NULL,
    portfolio integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ledger
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    account_id integer NOT NULL,
    transaction_id uuid NOT NULL,
    transaction_type character varying NOT NULL,
    value numeric NOT NULL,
    "position" integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.blockchains
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    blockchain_name character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transaction_operations
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    operation_name character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.platforms
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    platform_name character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tokens
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    token_name character varying NOT NULL,
    token_symbol character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.positions
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    avg_cost_buy numeric,
    avg_cost_sold numeric,
    short numeric,
    estimated_apy numeric,
    quantity numeric NOT NULL,
    "long" numeric,
    account integer,
    token integer,
    estimated_apr numeric,
    blockchain integer,
    created_date timestamp with time zone,
    updated_date timestamp with time zone,
    value_in_usd numeric,
    portfolio_id integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.protocol
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transaction_fee
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    value_in_usd numeric NOT NULL,
    tx_id uuid NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.pool_snapshots
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    address integer,
    blockchain integer,
    created_at timestamp with time zone,
    value_usd numeric,
    token0 integer,
    poolshare numeric,
    protocol integer,
    reserves0 numeric,
    reserves1 numeric,
    staked_token numeric,
    tvl numeric,
    updated_at timestamp with time zone,
    token1 integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    address integer,
    blockchain integer,
    created_at timestamp with time zone,
    amount numeric,
    amount_in numeric,
    authority character varying,
    blocknumber integer,
    fixed_from_coin integer,
    "from" character varying,
    hash character varying,
    instruction integer,
    max_coin_amount numeric,
    max_pc_amount numeric,
    min_amount_out numeric,
    "timestamp" integer,
    "to" character varying,
    type integer,
    token_name character varying,
    protocol integer,
    updated_at timestamp with time zone,
    portfolio_id integer,
    unrecognized_from_account character varying,
    unrecognized_to_account character varying
);

CREATE TABLE IF NOT EXISTS public.event_types
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    type character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.internal_transactions
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    wallet integer,
    blockchain integer,
    block_number integer,
    contact_address character varying,
    error_code character varying,
    "from" character varying,
    "to" character varying,
    gas_price numeric,
    gas_used numeric,
    hash character varying,
    input character varying,
    is_error boolean,
    "timestamp" integer,
    trace_id character varying,
    type integer,
    value numeric,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    datetime integer,
    status character varying,
    symbol integer,
    type character varying,
    side character varying,
    amount numeric,
    price numeric,
    filled numeric,
    fee numeric,
    exchange_info character varying,
    price_before_trade numeric,
    price_avg_after_trade numeric,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.trades
(
    id uuid NOT NULL DEFAULT public.uuid_generate_v4(),
    datetime integer,
    token_symbol integer,
    type character varying,
    side character varying,
    taker_or_maker character varying,
    amount numeric,
    price numeric,
    fee numeric,
    exchange_info character varying,
    order_id uuid,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.portfolios
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name character varying,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_token_fk FOREIGN KEY (token)
    REFERENCES public.tokens (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_operation_fk FOREIGN KEY (operation)
    REFERENCES public.transaction_operations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_blockchain_fk FOREIGN KEY (blockchain)
    REFERENCES public.blockchains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_platform_fk FOREIGN KEY (platform)
    REFERENCES public.platforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_fromaccount_fk FOREIGN KEY (from_account_id)
    REFERENCES public.accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_toaccount_fk FOREIGN KEY (to_account_id)
    REFERENCES public.accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT tx_dappp_fk FOREIGN KEY (protocol)
    REFERENCES public.protocol (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.accounts
    ADD CONSTRAINT account_blockchain_fk FOREIGN KEY (blockchain)
    REFERENCES public.blockchains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.accounts
    ADD CONSTRAINT account_portfolio_fk FOREIGN KEY (portfolio)
    REFERENCES public.portfolios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ledger
    ADD CONSTRAINT ledger_account_fk FOREIGN KEY (account_id)
    REFERENCES public.accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ledger
    ADD CONSTRAINT ledger_transaction_fk FOREIGN KEY (transaction_id)
    REFERENCES public.transactions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ledger
    ADD CONSTRAINT ledger_positions_fk FOREIGN KEY ("position")
    REFERENCES public.positions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ledger
    ADD FOREIGN KEY (transaction_id)
    REFERENCES public.transactions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.positions
    ADD CONSTRAINT position_account_fk FOREIGN KEY (account)
    REFERENCES public.accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.positions
    ADD CONSTRAINT position_token_fk FOREIGN KEY (token)
    REFERENCES public.tokens (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.positions
    ADD CONSTRAINT position_blockchain_fk FOREIGN KEY (blockchain)
    REFERENCES public.blockchains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.positions
    ADD CONSTRAINT position_portfolio_fk FOREIGN KEY (portfolio_id)
    REFERENCES public.portfolios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transaction_fee
    ADD CONSTRAINT transactions_fee_fk FOREIGN KEY (tx_id)
    REFERENCES public.transactions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pool_snapshots
    ADD CONSTRAINT pool_blockchain_fk FOREIGN KEY (blockchain)
    REFERENCES public.blockchains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pool_snapshots
    ADD CONSTRAINT pool_token0_fk FOREIGN KEY (token0)
    REFERENCES public.tokens (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pool_snapshots
    ADD CONSTRAINT pool_protocol_fk FOREIGN KEY (protocol)
    REFERENCES public.protocol (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pool_snapshots
    ADD CONSTRAINT pool_token1_fk FOREIGN KEY (token1)
    REFERENCES public.tokens (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pool_snapshots
    ADD CONSTRAINT pool_account_fk FOREIGN KEY (address)
    REFERENCES public.accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_blockchain_fk FOREIGN KEY (blockchain)
    REFERENCES public.blockchains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_protocol_fk FOREIGN KEY (protocol)
    REFERENCES public.protocol (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_event_types_fk FOREIGN KEY (type)
    REFERENCES public.event_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_potfolio_fk FOREIGN KEY (portfolio_id)
    REFERENCES public.portfolios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trades
    ADD CONSTRAINT trade_order_fk FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trades
    ADD CONSTRAINT trade_token_fk FOREIGN KEY (token_symbol)
    REFERENCES public.tokens (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;